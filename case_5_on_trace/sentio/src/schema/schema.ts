
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { String, Int, BigInt, Float, ID, Bytes, Timestamp, Boolean, Int8 } from '@sentio/sdk/store'
import { Entity, Required, One, Many, Column, ListColumn, AbstractEntity } from '@sentio/sdk/store'
import { BigDecimal } from '@sentio/bigdecimal'
import { DatabaseSchema } from '@sentio/sdk'







interface SwapConstructorInput {
  id: ID;
  distinctId: String;
  amountIn: BigInt;
  amountOutMin: BigInt;
  deadline: BigInt;
  path: Array<String>;
  to: String;
  transaction: String;
  blockNumber: BigInt;
}
@Entity("Swap")
export class Swap extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("String")
	distinctId: String

	@Required
	@Column("BigInt")
	amountIn: BigInt

	@Required
	@Column("BigInt")
	amountOutMin: BigInt

	@Required
	@Column("BigInt")
	deadline: BigInt

	@Required
	@ListColumn("String!")
	path: Array<String>

	@Required
	@Column("String")
	to: String

	@Required
	@Column("String")
	transaction: String

	@Required
	@Column("BigInt")
	blockNumber: BigInt
  constructor(data: SwapConstructorInput) {super()}
  
}


const source = `
type Swap @entity {
  id: ID!
  distinctId: String!
  amountIn: BigInt!
  amountOutMin: BigInt!
  deadline: BigInt!
  path: [String!]!
  to: String!
  transaction: String!
  blockNumber: BigInt!
}

`
DatabaseSchema.register({
  source,
  entities: {
    "Swap": Swap
  }
})
