
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { String, Int, BigInt, Float, ID, Bytes, Timestamp, Boolean, Int8 } from '@sentio/sdk/store'
import { Entity, Required, One, Many, Column, ListColumn, AbstractEntity } from '@sentio/sdk/store'
import { BigDecimal } from '@sentio/bigdecimal'
import { DatabaseSchema } from '@sentio/sdk'







interface GasSpentConstructorInput {
  id: ID;
  from: String;
  to: String;
  gasValue: BigInt;
  blockNumber: BigInt;
  transactionHash?: Bytes;
}
@Entity("GasSpent")
export class GasSpent extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("String")
	from: String

	@Required
	@Column("String")
	to: String

	@Required
	@Column("BigInt")
	gasValue: BigInt

	@Required
	@Column("BigInt")
	blockNumber: BigInt

	@Column("Bytes")
	transactionHash?: Bytes
  constructor(data: GasSpentConstructorInput) {super()}
  
}


const source = `type GasSpent @entity {
  id: ID!                   # Transaction hash
  from: String!             # Sender address 
  to: String!               # Recipient address
  gasValue: BigInt!         # Gas cost (gasUsed * gasPrice)
  blockNumber: BigInt!      # Block where transaction was executed
  transactionHash: Bytes    # Transaction hash as binary
}

`
DatabaseSchema.register({
  source,
  entities: {
    "GasSpent": GasSpent
  }
})
